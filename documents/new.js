const documents=require("../documents"),params=require("./params"),fs=require("fs"),name=process.argv[2];if(name){const s=fs.readFileSync("../utils/imports.txt","utf8"),e=fs.readFileSync("../utils/functions.txt","utf8");function props(s){const e=[];for(i=0;i<params.length;i++)e.push(`this.${s[i]} = ${s[i]};`);return e.join(" ")}const n=s+`class Entry {constructor(${params.map(s=>s)}) { this.id = nanoid(); ${props(params)}}}; const addEntry = (${params.map(s=>s)}) => { database.push(new Entry(${params.map(s=>s)}));};`+e;!0===documents.includes(name)?console.log("Document already exists!"):(documents.push(name),fs.mkdir(name,()=>{fs.writeFileSync(`./${name}/${name}.js`,n),fs.writeFileSync(`./${name}/data.json`,'{"db":[]}'),fs.writeFileSync("../documents.js",`const documents=[${documents.map(s=>`'${s}'`).join(",")}];module.exports=documents;`)}),console.log("Document created!"))}else console.log("Please provide a document name!");